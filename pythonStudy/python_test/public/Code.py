# -*- coding: utf-8 -*-
# @Time    : 2021/8/7 13:21
# @Author  : huni
# @Email   : zcshiyonghao@163.com
# @File    : Code.py
# @Software: PyCharm

from python_test.public.Log import log


# Todo 框架统一消息处理


class CodeDictCls(dict):
    """
    自定义dict类为了节省引用时少写一点代码
    """

    def code(self, _code_num: int):
        """
        :param _code_num:
        :return: 返回存在的指定code码，不存在则返回None
        """
        if isinstance(_code_num, str):
            assert _code_num.isdigit(), '传入的code为str类型且无法转为int'
            _code_num = int(_code_num)
        return self.get(_code_num, {}).get('code', None)

    def msg(self, _code_num: int, default: str = ''):
        """
        :param default:  msg取不到时返回默认值
        :param _code_num:
        :return: 返回存在的指定code码对应的msg，不存在则返回''
        """
        if isinstance(_code_num, str):
            assert _code_num.isdigit(), '传入的code为str类型且无法转为int'
            _code_num = int(_code_num)
        return self.get(_code_num, {}).get('msg', default)

    def codes(self, code_nums: list):
        """
        :param code_nums:
        :return: 返回存在的指定code码列表，不存在则返回包含多个None的列表
        """
        if isinstance(code_nums, int):
            code_nums = [code_nums]
        return [self.get(_code_num, {}).get('code') for _code_num in code_nums]

    def error_http_code(self):
        """
        返回跟http状态码有关的异常状态码
        :return: list
        """
        error_http_codes = []
        for num in range(400, 505 + 1):
            if self.get(20000 + num, {}):  # 20000为自定义http状态码的前缀
                error_http_codes.append(self.get(20000 + num, {}).get('code', None))
        return error_http_codes

    def http_code(self, _code_num):
        if isinstance(_code_num, str):
            assert _code_num.isdigit(), '传入的code为str类型且无法转为int'
            _code_num = int(_code_num)
        return self.get(20000 + _code_num, {}).get('code', None)

    def http_msg(self, _code_num, default = None):
        if isinstance(_code_num, str):
            assert _code_num.isdigit(), '传入的code为str类型且无法转为int'
            _code_num = int(_code_num)
        return self.get(20000 + _code_num, {}).get('msg', default)


Code = CodeDictCls()

"""
1.单、双位数为接口回调状态码
2.五位数为新增的自定义状态码
3.三位数为老框架迁移过来的状态码，各自只代表各自msg的含义，不包含多重含义
"""

codes = [
        # Remind 接口回调状态码
        [0, 'success'],
        [1, '审核中'],
        [2, '已完成'],
        [3, '异常订单'],
        [4, '进行中'],
        [5, '退款中'],
        [6, '已退款'],
        [7, '拒绝退款'],
        [8, '排队中'],
        [9, '错误订单人工已经处理'],
        [10, '人工安排'],
        [11, '内部异常'],
        [12, '计数排队'],
        [13, '进行中排队'],  # 进行中进行的排队
        [14, '流水对比失败'],
        [15, '等待获取开始数'],
        # Remind 老框架的状态码
        [-500, '未定义的错误原因,请联系技术人员处理'],
        [108, '未登陆'],
        [103, '密码错误'],
        [105, 'http请求返回码非200、201、301、302'],
        [106, '需要等待/排队'],
        [112, '商品维护'],
        [113, '商品上架'],
        [109, '价格变动'],
        [120, '不进行处理'],
        [101, '余额不足'],
        [110, '访问超时'],
        [1044, '搜索不到订单号'],
        [104, '获取余额失败|下单成功，但没有取到平台id|搜不到订单'],
        [102, '异常捕获到的非预处理异常'],
        [111, '下单失败需重新确认'],
        [107, '返回值是未预处理的消息'],
        [600, '系统配置了不需要更新cookies，与不监控余额设置'],
        [999, '无意义，用于判断Code码是否非0或者是取Code时出错返回999'],
        # Remind 单元测试需要用到的状态码
        [701, '还未进行退款，添加订单到数据库'],
        [702, '退款订单的状态为还未进行退款，改为等待中'],
        [703, '还未调用过退款方法'],
        [704, '退款订单在退款进行中，还未结束'],
        [705, '返回码为空，可以进行退款'],
        [706, '未确定的订单状态，可以进行退款'],
        [707, '退款检查未通过，不可进行退款方法'],
        [708, '平台id为空，不可进行退款'],
        [709, '退款的环境检查未通过，不可进行退款'],
        [710, '平台属于退单后直接删除订单的平台, 直接回调退款结果和保存订单到数据库'],
        [711, '退款时未登录，退款失败并移除平台cookies'],
        [712, '退款操作返回码未预处理'],
        [713, '等待完成退款完成已回调, 不再需要退款操作'],
        [714, '退款成功，已回调redis和保存到数据库'],
        [715, '退款时间还未到，继续等待'],
        [716, '取平台监控余额失败'],
        [717, '平台监控余额为0，不需要监控余额'],
        [718, '平台实际余额大于监控余额，不需要进行回调企业微信'],
        [719, '平台获取的订单时间格式有误，无法进行订单检查'],
        [720, '检查订单时核对24小时内的订单数量大于1条'],
        [721, '检查订单时，没有符合24小时内的订单'],
        [723, '检查订单时，有一条24小时内的订单，并回调进行中'],

        [9999, 'Undefined takeover exception'],

        # Remind http请求状态码与对应消息
        [20400, '(建议联系技术)客户端请求的语法错误，服务器无法理解'],
        [20401, '(建议联系技术)请求要求用户的身份认证'],
        [20402, '(建议联系技术)保留，将来使用'],
        [20403, '(建议重新推送)服务器理解请求客户端的请求，但是拒绝执行此请求'],
        [20404, '(建议检查平台是否正常访问)服务器无法根据客户端的请求找到资源'],
        [20405, '(建议重新推送)客户端请求中的方法被禁止'],
        [20406, '(建议重新推送)服务器无法根据客户端请求的内容特性完成请求'],
        [20407, '(建议联系技术)请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权'],
        [20408, '(建议检查平台是否已经下单成功，否则重新推送)服务器等待客户端发送的请求时间过长，超时'],
        [20409, '(建议联系技术)服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突'],
        [20410, '(建议检查对方平台是否访问正常)客户端请求的资源存在过但目前不存在'],
        [20411, '(建议联系技术)服务器无法处理客户端发送的不带Content-Length的请求信息'],
        [20412, '(建议联系技术)客户端请求信息的先决条件错误'],
        [20413, '(建议联系技术)由于请求的实体过大，服务器无法处理，因此拒绝请求'],
        [20414, '(建议联系技术)请求的URI过长（URI通常为网址），服务器无法处理'],
        [20415, '(建议联系技术)服务器无法处理请求附带的媒体格式'],
        [20416, '(建议联系技术)客户端请求的范围无效'],
        [20417, '(建议联系技术)服务器无法满足Expect的请求头信息'],
        [20500, '(建议检查平台是否已经下单成功，否则重新推送)服务器内部错误，无法完成请求'],
        [20501, '(建议联系技术)服务器不支持请求的功能，无法完成请求'],
        [20502, '(建议重新推送)一般是代理异常'],
        [20503, '(建议联系技术)由于超载或系统维护，服务器暂时的无法处理客户端的请求'],
        [20504, '(建议检查平台是否已经下单成功，否则重新推送)一般是代理出现异常，导致超时'],
        [20505, '(建议联系技术)服务器不支持请求的HTTP协议的版本，无法完成处理'],
        [20506, 'Try to get non-json data'],
        # Remind 自定义状态码
        [10001, '当前下单单价与客户下单时单价不一致,请检查当前商品最新单价'],
        [10002, '下单余额不足请联系充值'],
        [10003, '登录失败'],  # 登录失败 无其他提示
        [10004, '内部授权验证失败'],
        [10005, '登录的账号错误或不存在'],
        [10006, '登录失败次数过多，已被禁止登录'],
        [10007, '解析页面取值失败'],
        [10008, '内部参数缺失'],
        [10009, '(建议重新推送)cookies失效已重新登陆'],
        [10010, '网址错误或请求信息异常'],
        [10011, '远程主机强迫关闭'],
        [10012, '远程服务器拒绝连接'],
        [10013, '重定向次数过多'],
        [10014, '返回信息异常，非json格式'],  # 用于处理返回信息需要json格式的异常
        [10015, '(建议重新推送)验证码错误'],
        [10016, '下单数量不足'],
        [10017, '作品id位数不足或链接错误'],
        [10018, 'apikey缺失'],
        [10019, 'redis建立连接实例失败'],
        [10020, '采集返回信息异常'],
        [10021, '(建议人工检查订单)二次检测首'],
        [10022, '二次检测超过指定次数'],
        [10023, '无意义，用来表示此平台不需要二次检测'],
        [10024, '当前进行下单的订单状态不为审核中或排队中'],
        [10025, '强制不走开始数的转换出现异常，下单信息转换失败'],
        [10026, '订单未通过下单前二次检测'],
        [10027, '无意义，用来表示此平台订单通过了下单后二次检测'],
        [10028, '主订单已停止,审核处理失败'],
        [10029, '查询不到订单'],
        [10030, '采集间隔'],
        [10031, '异步二次检测'],
        [10032, '二次检测异常'],
        [10033, '获取单价失败'],
]

for code_num, code_msg in codes:
    # 重复code码不会进行覆盖并日志记录警告
    if not Code.code(code_num):
        Code.update({code_num: {'code': code_num, 'msg': code_msg}})
    else:
        log.diy('Code_log', f'code{code_num}已存在，不会进行覆盖，msg为:{code_msg}', 'warn')

if __name__ == '__main__':
    # print(Code.codes([110, 112]))

    print(Code.error_http_code())
    print(Code.http_code(404))
    print(Code.http_msg(404))
